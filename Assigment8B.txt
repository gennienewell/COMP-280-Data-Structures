#include <iostream>
#include <iomanip>
#include <string>
using namespace std;


class Car
{
  
private:
        string make;
        string model;
        string color;
        int year;
        int Mileage;
        int VIN ;



public:
//exepion class
    class  NegativeMileage
    {};
    class  YearBefore1970
    {};
    class  invalidMake
    {};
// Member functions definitions including constructor

Car(string ma,string mo,string co,int ye,int Mi,int VN) 
{ 
    make=ma;
    model=mo;
    color=co;
    year=ye;
    Mileage=Mi;
    VIN=VN;

    
     
    
}
//Getters Setters
    int getVin() {
        return VIN;
    }

    void setVin(int i) {
        VIN = i;
        
    }

     string getMake() {
        return make;
    }

    void setMake(string x) {
      int size = x.length();
       if (size > 4)
          make = x;
        else
        {throw invalidMake();
        }
       
    }

    string getModel() {
        return model;
    }

    void setModel(string a) {
        model = a;
    }

    int getYear() {
        return year;
    }

    void setYear(int y) {
      if (y > 1970)
        year = y;
        else
        {throw  YearBefore1970();
        }
    }

     int getMileage() {
        return Mileage;
    }

     void setMileage(int m) {
       if (m > 0)
         Mileage = m;
        else
        throw NegativeMileage();
        
        
        
    }

     string getColor() {
        return color;
        
    }

    void setColor(string c) {
        color = c;
    }

};

// Main function for the program
int main() {
 
Car car1("Porsche","911","Silver",2005,18990,1237362);
Car car2("Ford","Mustang","Red",2007,49842,7337372);
Car car3("Chevrolet","Beretta","Black",1989,90332,2873644);


Car carslist[] = {car1,car2,car3};

for (int i = 0; i < 3; i++) {
  cout<<i+1<<". "<<carslist[i].getMake()<<"  "<<carslist[i].getModel()<<"  "<<carslist[i].getColor()<<"  "<<carslist[i].getYear()<<"  "<<carslist[i].getMileage()<<"  "<<carslist[i].getVin()<<"  "<<endl;
}

try{
int carChoise;
int answer1;
int answer2;
string answer3;

cout << "Witch car in the array do you want to change in Array: Select car 1-3  ";
cin >> carChoise ; // Get user input from the keyboard
cin.ignore();


cout << "Type New Year?: "; // Type a description and press enter
cin>>answer1; // Get user input from the keyboard
cin.ignore();



cout<<""<<endl;
cout << "Type New Milage: "; // Type a description and press enter
cin>>answer2; // Get user input from the keyboard

cout<<""<<endl;
cout << "Type New Make: "; // Type a description and press enter
cin>>answer3; // Get user input from the keyboard

cout<<endl;
  carslist[carChoise-1].setYear(answer1);
  carslist[carChoise-1].setMileage(answer2);
  carslist[carChoise-1].setMake(answer3);



for (int i = 0; i < 3; i++) {
  cout<<i+1<<". "<<carslist[i].getMake()<<"  "<<carslist[i].getModel()<<"  "<<carslist[i].getColor()<<"  "<<carslist[i].getYear()<<"  "<<carslist[i].getMileage()<<"  "<<carslist[i].getVin()<<"  "<<endl;
}

}
catch(Car::YearBefore1970)
{
cout<<"Error: Incorrect Year"<<endl;
}


catch(Car::NegativeMileage)
{
cout<<"Error: Incorrect Mileage"<<endl;
}



catch(Car::invalidMake)
{
cout<<"Error: Incorrect Make"<<endl;
}


  return 0;
}